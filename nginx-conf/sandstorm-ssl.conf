# This magic stanza is ESSENTIAL to avoid breaking WebSockets.
#
# Specifically, for WebSocket forwarding, we want to forward the `Connection` header.
# This "map" declaration helps with that.
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
        listen 80;
        #server_name sandstorm.simonxix.com;
        server_name ~^(.*)>rlc.sandcats.io$ ~rlc.sandcats.io$;

        location / {
                proxy_pass https://sandstorm;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_connect_timeout 150;
                proxy_send_timeout 100;
                proxy_read_timeout 100;
                proxy_buffers 4 32k;
                client_max_body_size 1024m;
                client_body_buffer_size 128k;

                # Forward WebSocket
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header X-Real-IP $remote_addr;
        }

        # http2 requires Nginx >=1.9.5
        listen 443 ssl http2; # managed by Certbot

        ssl_certificate /etc/nginx/ssl/sandstorm.pem;
        ssl_certificate_key /etc/nginx/ssl/sandstorm.key;

        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

        #ssl_session_timeout 5m;
        #ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        #ssl_session_tickets off;

        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

        # Configure SSL with forward secrecy and other goodies.
        # Ciphersuite taken from https://wiki.mozilla.org/Security/Server_Side_TLS
        # "Intermediate compatibility" as of 2019-09-12
        # TLSv1.3 requires Nginx >=1.13.0 & OpenSSL >=1.1.1
        ssl_protocols TLSv1.2 TLSv1.3;
        #ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        #ssl_prefer_server_ciphers off;

        # HSTS prevents attackers from tricking you into connecting via HTTP in the
        # future, but if you actually intend to access the server via non-SSL in the
        # future then you should probably delete this line.
        #add_header Strict-Transport-Security "max-age=63072000" always;

        # OCSP stapling, requires Intermediate cert
        #ssl_stapling on;
        #ssl_stapling_verify on;

        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

}
